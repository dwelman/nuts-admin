// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Identity An identity object
type Identity struct {
	// Did The DID associated with this identity
	Did string `json:"did"`

	// Name The name of this identity, which is the last path part of a did:web DID.
	// If the DID does not contain paths, or it is not a did:web DID, it will be the same as the DID.
	Name string `json:"name"`
}

// IdentityDetails An identity object with additional details
type IdentityDetails struct {
	Did               string `json:"did"`
	DiscoveryServices []struct {
		Active bool                    `json:"active"`
		Id     string                  `json:"id"`
		Vp     *map[string]interface{} `json:"vp,omitempty"`
	} `json:"discovery_services"`
	Name              string                   `json:"name"`
	WalletCredentials []map[string]interface{} `json:"wallet_credentials"`
}

// CreateIdentityJSONBody defines parameters for CreateIdentity.
type CreateIdentityJSONBody struct {
	DidQualifier string `json:"did_qualifier"`
}

// GetIssuedCredentialsParams defines parameters for GetIssuedCredentials.
type GetIssuedCredentialsParams struct {
	// CredentialTypes A comma-separated list of credential types which are returned.
	CredentialTypes string `form:"credentialTypes" json:"credentialTypes"`
}

// CreateIdentityJSONRequestBody defines body for CreateIdentity for application/json ContentType.
type CreateIdentityJSONRequestBody CreateIdentityJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/id)
	GetIdentities(ctx echo.Context) error

	// (POST /api/id)
	CreateIdentity(ctx echo.Context) error

	// (GET /api/id/{did})
	GetIdentity(ctx echo.Context, did string) error

	// (GET /api/issuer/vc)
	GetIssuedCredentials(ctx echo.Context, params GetIssuedCredentialsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIdentities converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIdentities(ctx)
	return err
}

// CreateIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIdentity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIdentity(ctx)
	return err
}

// GetIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIdentity(ctx, did)
	return err
}

// GetIssuedCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetIssuedCredentials(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIssuedCredentialsParams
	// ------------- Required query parameter "credentialTypes" -------------

	err = runtime.BindQueryParameter("form", true, true, "credentialTypes", ctx.QueryParams(), &params.CredentialTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentialTypes: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIssuedCredentials(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/id", wrapper.GetIdentities)
	router.POST(baseURL+"/api/id", wrapper.CreateIdentity)
	router.GET(baseURL+"/api/id/:did", wrapper.GetIdentity)
	router.GET(baseURL+"/api/issuer/vc", wrapper.GetIssuedCredentials)

}
